''' git 01.py
# 파이썬이란?
파이썬. ( Python )
프롬프트. ( >>> )
인터프리터 언어. ( 소스 코드를 한 줄씩 해석한 후 그때그때 실행해 결과를 바로 확인할 수 있는 언어 )
기업에서 실무를 할 때 많이 사용. ( ex. 구글, 인스타그램, 넷플릭스, 아마존 등 많은 IT 기업에서 사용 )
구글에서 만든 소프트웨어의 50% 이상이 파이썬으로 작성되었다는 이야기도 있다.
공동 작업과 유지 보수가 매우 쉽고 편리. ( 이미 다른 언어로 작성된 많은 프로그램이 파이썬으로 재구성되고 있다 )

# 파이썬의 특징
1. 파이썬은 인간다운 언어이다.
2. 문법이 쉬워 빠르게 배울 수 있다.
3. 무료이지만 강력하다.
4. 간결하다.
5. 프로그래밍을 즐기게 해 준다.
6. 개발 속도가 빠르다.

프로그래밍. ( 인간이 생각하는 것을 컴퓨터에 지시하는 행위 )
파이썬. ( 사람이 생각하는 방식을 그대로 표현할 수 있는 언어 )

if 4 in [1, 2, 3, 4]: print("4가 있습니다")
만약 4가 1, 2, 3, 4 안에 있으면 "4가 있습니다"를 출력한다.

파이썬. ( 오픈소스, 무료 소프트웨어 )
오픈소스. ( open source. 저작권자가 소스 코드를 공개하여 누구나 별다른 제한 없이 자유롭게 사용, 복제, 배포, 수정할 수 있는 소프트웨어 )
만들고자 하는 프로그램의 대부분을 파이썬으로 만들 수 있다.
하지만 시스템 프로그래밍이나 하드웨어 제어와 같은 매우 복잡하고 반복 연산이 많은 프로그램은 파이썬과 어울리지 않는다.
이러한 약점을 극복할 수 있도록 다른 언어로 만든 프로그램을 파이썬 프로그램에 포함시킬 수 있다.
ex. 프로그램의 전반적인 뼈대는 파이썬으로 만들고 빠른 실행 속도가 필요한 부분은 C로 만들어서 파이썬 프로그램 안에 포함시키기.

파이썬 라이브러리 중에는 파이썬만으로 제작된 것도 많지만 C로 만든 것도 많다.
C로 만든 것은 대부분 속도가 빠르다.
파이썬 라이브러리. ( 파이썬 프로그램을 작성할 때 불러와 사용할 수 있도록 미리 만들어 놓은 파이썬 파일의 모음 )

파이썬은 가장 좋은 방법 1가지만 사용하는 것을 선호한다.
이 간결함은 파이썬 문법에도 그대로 녹아 있어 파이썬 프로그래밍을 하는 사람들은 잘 정리되어 있는 소스 코드를 볼 수 있다.
그 덕분에 다른 사람이 작업한 소스 코드를 이해하기 쉽고 공동 작업과 유지 보수가 매우 편리하다.

languages = ['python', 'perl', 'c', 'java']

for lang in languages:
    if lang in ['python', 'perl']:
        print("%6s need interpreter" % lang)
    elif lang in ['c', 'java']:
        print("%6s need compiler" % lang)
    else:
        print("should not reach here")

파이썬 프로그램은 줄을 맞추지 않으면 실행되지 않는다. ( 들여쓰기. 가독성에 많은 도움 )
파이썬은 프로그래머가 다른 부수적인 개념이나 제한 사항 등에 신경 쓸 필요 없이 만들고자 하는 기능에만 집중할 수 있게 해준다.

Life is too short, You need python. ( 인생은 너무 짧으니, 너는 파이썬이 필요하다 )

# 파이썬으로 할 수 있는 일.
1. 웹 프로그래밍.
2. 인공지능 ( artificial Intelligence ) 과 머신러닝 ( machine learning ).
3. 수치 연산 프로그래밍.
4. 데이터 분석.
5. 데이터베이스 프로그래밍.
6. 시스템 유틸리티 제작하기.
7. GUI 프로그래밍.
8. C/C++ 과 결합하기.
9. 사물 인터넷.

파이썬으로 할 수 없는 일.
1. 시스템과 밀접한 프로그래밍 영역.
2. 모바일 프로그래밍.

파이썬으로 할 수 있는 일은 매우 많다.
파이썬은 대부분의 프로그래밍 언어가 하는 일을 쉽고 깔끔하게 처리한다.

파이썬을 활용하면 자연어 처리, 음성 인식, 이미지 인식과 같은 인공지능 기술을 구현할 수 있다.
머신러닝. ( 인공지능의 한 분야로, 경험을 통해 자동으로 발전하는 컴퓨터 알고리즘을 연구하는 분야 )
파이썬은 인공지능과 머신러닝 프로그래밍을 쉽게 할 수 있는 다양한 라이브러리를 제공한다.
ex. 사이킷런 ( scikit-learn ), 텐서플로( TensorFlow ), 파이토치 ( PyTorch ), 케라스 ( Keras ) 등

수치연산 프로그래밍.
넘파이. ( Numpy. 이 모듈은 C로 작성했기 때문에 파이썬에서도 수치 연산을 빠르게 수행할 수 있다 )

데이터 분석.
데이터 처리, 통계 분석, 시각화를 손쉽게 수행할 수 있다.
ex. 넘파이 ( NumPy ), 판다스 ( Pandas ), 맷플롯립 ( Matplotlib )

데이터베이스 프로그래밍.
파이썬은 데이터베이스에 접근하기 위한 도구를 제공한다.
ex. 사이베이스 ( Sybase ), 인포믹스 ( Informix ), 오라클 ( Oracle ), 마이에스큐엘 ( MySQL ), 포스트그레스큐엘 ( PostgreSQL ) 등
피클 ( pickle ) 은 파이썬에서 사용하는 자료를 변형 없이 파일에 저장하거나 불러오는 일을 수행한다.

시스템 유틸리티 제작하기.
파이썬은 운영체제 ( 윈도우, 리눅스 등 ) 의 시스템 명령어를 사용할 수 있는 각종 도구를 갖추고 있다.
이를 바탕으로 파일 관리, 로그 분석, 시스템 모니터링 등과 같은 여러가지 시스템 유틸리티를 만드는데 유리하다.
실제로 시스템에서 사용 중인 서로 다른 유틸리티성 프로그램을 하나로 합쳐 보다 유용한 프로그램들을 무수히 만들어 낼 수 있다.
유틸리티. ( 컴퓨터를 사용하는데 도움을 주는 여러 가지 소프트웨어 )

GUI 프로그래밍.
GUI ( graphic user interface ) 프로그래밍이란 쉽게 말해 화면에 윈도우 창을 만들고 그 창에 프로그램을 동작시킬 수 있는 메뉴나 버튼 등을 추가하는 것.
GUI 프로그래밍을 위한 도구.
ex. 티케이인터 ( Tkinter )
티케이인터를 사용하면 단 5줄의 소스 코드만으로 윈도우 창을 띄울 수 있다.

C/C++ 과 결합하기.
파이썬은 접착 ( glue ) 언어.
다른 언어와 결합해서 사용할 수 있기 때문이다.
C/C++ 로 만들 프로그램을 파이썬에서 사용할 수 있고, 파이썬으로 만든 프로그램도 C/C++ 에서 사용할 수 있다.

사물 인터넷. ( Internet of things )
ex. 라즈베리 파이를 제어 ( 연결된 모터를 작동시키기. LED에 불 들어오게 하기 )
'''